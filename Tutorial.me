
Nota inicial sobre meu ambiente de desenvolvimnto.
Tenho dois raspberrys. Um para desenvolvimento e um para produção.

Para desenvolver essa é a opção mais confortável e que mais se asemelha ao ambiente profissional, onde um servidor roda a aplicação e existe um ambiente isolado para desenvolver e melhorar a aplicação que esta em produção. 

Eu preciso desses ambientes pois estou fazendo testes com o sistema. Para seguir esse tutorial

0 - Materials
- Raspberry Pi(we used RPi3b)
- DHT-11 Shield(other will be included on the fly)
- Some pc to conecct to Raspiberry

1 - Best Pracices
- Create you own notes.
- Create and update your github or gitlab repository.

2 - Github
git init
git add *
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/alexandrelobiancosantos/RaspberryPiFullCycle.git
git push -u origin main

1 - Set UP the sd card 
- Formating Sd card
- Dowload and install Raspberry Pi Imager 
    - https://www.raspberrypi.com/software/
- Choose OS:
    - RASPBERRY PI OS LITE (LEGACY) -Debian Buster whit secuity updates and no 
    destop enviroment 2023-02-21
- Choose your sd card
- Click on configure whell and configure:
    - Your SSH, username(RPi) and passwords(raspberry) [*]
    - Your local settings
- Click on write and wait to finish


RPiFC_A - development
RPiFC_B - Production

2- Booting and login your Raspberry Pi
- Remove the sd card and plug to Raspberry Pi
- Plug the network cable
- Plug the power cabe and whait a fell seconds
- Download advanced IP scaner
    - https://www.advanced-ip-scanner.com/br/download/
    - Click and chose your language
    - Chose execute
    - find the raspberry's IP
- Use Putty for login
    - Insert IP
    - Acept the warnig on terminal
    - Insert user and password [*]

3 - Configure root login
~ $ sudo nano /etc/ssh/sshd_config
uncomend and edit this line:
#PermitRootLogin prohibit-password
to 
PermitRootLogin yes
save and exit
~ $ sudo /etc/init.d/ssh restart
~ $ sudo passwd root ##########
exit and login as root

RPiFC_A - ******
RPiFC_B - ******

4 - Update
# apt-get update
# apt-get upgrade -y

5 - raspi-configure
# raspi-config
- Update -> ok
- System Optinons -> Configure your LAN -> Wireless LAN -> SSID and password -> ok
- Performance Optinons -> GPU Memory -> 16 -> ok
- Advanced Optinons -> Expand Filesystem -> ok
- Exit
# reboot now

6 - Backup your sd card
# shutdown now
- Remove the SD card
- Use win32 disk Imager
- Chose a name of the image like: RaspberryPi_FullCycle_SO_Configured_Mar03_2023.img
- Click on Read and wait a few minutes.
- Plug the sd card to raspberry and start

7 - Requirements for complile python3.10

You need some development packages that provide header files and necessary libraries for compiling and linking Python programs on Linux systems. Here is a brief description of each:

build-essential: provides the basic set of system building and compilation tools, including the C++ compiler.
libreadline-dev: provides the readline library for handling interactive input on the terminal.
libncursesw5-dev: provides the ncursesw library for handling text-based user interfaces.
libssl-dev: provides the OpenSSL library for encryption and security support.
libsqlite3-dev: provides the SQLite library for database support.
tk-dev: provides the Tkinter library for graphical user interface (GUI) support.
libgdbm-dev: provides the GDBM library for database support.
libc6-dev: provides the standard C library.
libbz2-dev: provides the Bzip2 library for data compression.
libffi-dev: provides the FFI (Foreign Function Interface) library for supporting function calls from other languages.
zlib1g-dev: provides the zlib library for data compression.

so run:
# apt-get install wget build-essential libreadline-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev libffi-dev zlib1g-dev -y

8- Instaling Python3.10.10

# wget -c https://www.python.org/ftp/python/3.10.10/Python-3.10.10.tar.xz
# tar -Jxvf Python-3.10.10.tar.xz
# cd Python-3.10.10
# ./configure --enable-optimizations

After the successful compilation, you will get the following output:
checking for --disable-test-modules... no
configure: creating ./config.status
config.status: creating Makefile.pre
config.status: creating Misc/python.pc
config.status: creating Misc/python-embed.pc
config.status: creating Misc/python-config.sh
config.status: creating Modules/ld_so_aix
config.status: creating pyconfig.h
creating Modules/Setup.local
creating Makefile

# make altinstall
# python3.10 --version

You will get the Python version in the following output:
Python 3.10.10

To set Python 3.10.10 as default:
# update-alternatives --install /usr/bin/python python /usr/local/bin/python3.10 1
# update-alternatives --install /usr/bin/pip pip /usr/local/bin/pip3.10 1

# python --version

You will get the following output:
Python 3.10.0

https://www.rosehosting.com/blog/how-to-install-python-3-10-on-debian-11/


9 - Install Pyton venv
# pip install pip setuptools wheel --upgrade

10 - Creating the development enviroment
# mkdir app1
# cd app1
# python -m venv venv
# . venv/bin/activate

11 - Instaling Django

# pip install --upgrade pip
# pip install django

12 - Ceating a project named app1

# django-admin startproject app1 .

13 - Testing

cd app1
nano settings.py

edit the line 
ALLOWED_HOSTS = []

To
ALLOWED_HOSTS = ['*'] # 


cd..
python manage.py runserver 0.0.0.0:8000

on the browser type
'MyRaspberryIp':8000
Tha django start page shoud load


14 - Adafriut

# apt-get install libgpiod-dev
# apt-get install git

# python -m venv .
# . bin/activate

# pip install wheel
# pip install rpi.gpio==0.7.1
# git clone https://github.com/adafruit/Adafruit_CircuitPython_DHT.git

# pip install adafruit-circuitpython-dht
# cd Adafruit_CircuitPython_DHT/example
# nano dht_simpletest.py

editar para o tipo de sensor e pino. No meu caso DHT11 e D17:

dhtDevice = adafruit_dht.DHT11(board.D17)

Fim dos testes e inicio do projeto
15 - Inicio do projeto



Criar diretorio de projeto 'lab_app'
#  mkdir lab_app && cd lab_app
Criar ambiente virtual
# python -m venv .
Ativando o ambiente virtual
# . bin/activate
Instalar as bibliotecas necessarias ao projeto
# pip install --upgrade pip
# pip install wheel --upgrade
# pip install rpi.gpio==0.7.1
# pip install adafruit-circuitpython-dht
# git clone https://github.com/adafruit/Adafruit_CircuitPython_DHT.git
# pip install django
Criar projeto 'lab'
# django-admin startproject lab .
Editar settings para permitir acesso de outro ambiente
cd lab && nano settings.py
ALLOWED_HOSTS = ['*']
# cd ..
# python manage.py runserver 0.0.0.0:8000

Abrir pagina do Django no navegador e testar acesso a pagina incial do Django

parei no inicio da aula 22. Vamos iniciar a criação de um app
